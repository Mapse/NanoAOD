112,115d111
< // for fillDescriptions
< #include "FWCore/ParameterSet/interface/ConfigurationDescriptions.h"
< #include "FWCore/ParameterSet/interface/ParameterSetDescription.h"
< 
346,347d341
<   static void fillDescriptions(edm::ConfigurationDescriptions & descriptions);
< 
527c521,522
<   std::string outFile;
---
>   
>   string outFile;
531d525
<   bool covout; // whether to write or not covariance matrices in nanoAOD extensions
1256c1250,1252
< 
---
> // set flags for output steering
> //const bool nanoext = true; // write out nanoAOD extensions (now set elsewhere) 
> const bool covout = false; // don't write out covariance matrices in extensions
1278,1285d1273
<   outFile = iConfig.getParameter<std::string>("outFile");
<   isData = iConfig.getParameter<bool>("isData");
<   hlt_proc = iConfig.getParameter<std::string>("hltProcess");
<   nanoext = iConfig.getParameter<bool>("nanoExtension");
<   covout = iConfig.getParameter<bool>("writeCovariance");
<   custom_flag = iConfig.getParameter<std::vector<std::string> >("customFlag");
<   if (!custom_flag.empty())
<     custom_tag = iConfig.getParameter<edm::InputTag>("customTag");
1289c1277,1288
< 
---
>   outFile = iConfig.getParameter<string>("outFile");
>   isData = iConfig.getParameter<bool>("isData");
>   // to be improved 
>   hlt_proc = "HLT";
>   // custom_flag = "";
> #ifdef Compatibility
>   nanoext = false;
> #else
>   nanoext = true;
> #endif
> // protect the next with some "if" concerning its existenmce in the Config?
> //  nanoext = iConfig.getParameter<bool>("nanoExtension");
1298a1298,1308
>   /*
> #ifdef CMSSW42X
>   CMSSW = 40208;
> #endif
> #ifdef CMSSW53X
>   CMSSW = 50332;
> #endif
> #ifdef CMSSW7plus
>   CMSSW = 70000;
> #endif
>   */
1316c1326
<   if (CMSSW == 0) {
---
>   if (CMSSW==0) {
1431c1441
<     custom_tkn = consumes<edm::TriggerResults>(custom_tag);
---
>     custom_tkn = consumes< edm::TriggerResults>(custom_tag);
6963a6974
>   t_event->SetAutoSave(500000000);
6983,6987c6994
<   t_event->SetAutoSave(-500000000);
< 
< #if ROOT_VERSION_CODE > ROOT_VERSION(6, 6, 0)
<   t_event->SetImplicitMT(false);
< #endif
---
>   t_event->SetAutoSave(500000000);
8043c8050,8053
<       TBranch *hlt_path = t_event->Branch(path.c_str(), &hlt_bit.at(path), (path + "/O").c_str());  
---
>       /* creates segmentation fault
>       TBranch *hlt_path = t_event->Branch(path.c_str(), &hlt_bit.at(path), (path + "/O").c_str());
>       // this is the GetEntries of the output ntuple filled so far
>       //cout << path << " " << t_event->GetEntries() << endl;  
8045c8055,8059
<         hlt_path->Fill(); 
---
>         hlt_path->Fill();
>       */
>       // iP and hlt_bit_size() do not agree due to offset of 1 and 
>       // DST/AlCa triggers present in hlt_cfg but not in hlt_bit
>       cout << path << " " << iP << " " << hlt_bit.size() << endl;  
8046a8061,8063
>     // for debug 
>     else if (path.substr(0, 3) == "HLT")
>       cout << path << " exists already" << endl;
8050,8062d8066
< void NanoAnalyzer::fillDescriptions(edm::ConfigurationDescriptions & descriptions) 
< {
<   edm::ParameterSetDescription desc;
<   desc.add<std::string>("outFile", "test.root");
<   desc.add<bool>("isData", true);
<   desc.add<std::string>("hltProcess", "HLT");
<   desc.add<bool>("nanoExtension", false);
<   desc.add<bool>("writeCovariance", false);
<   desc.add<std::vector<std::string> >("customFlag", std::vector<std::string>());
<   desc.add<edm::InputTag>("customTag", edm::InputTag());
<   descriptions.add("nanoAnalyzer", desc);
< }
< 
